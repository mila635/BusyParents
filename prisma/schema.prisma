generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum PendingStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  image         String?
  provider      String          @default("google")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLoginAt   DateTime?

  // Relations
  tokens        UserToken[]      // âœ… one-to-many
  settings      UserSettings?
  logs          UserLog[]
  events        CalendarEvent[]
  pendingEvents PendingEvent[]

  @@map("users")
}

model UserToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
  @@index([userId])
}

model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  emailProcessingEnabled Boolean  @default(true)
  calendarSyncEnabled    Boolean  @default(true)
  reminderEnabled        Boolean  @default(true)
  timezone               String   @default("UTC")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserLog {
  id           String    @id @default(cuid())
  userId       String
  action       String
  service      String
  status       String
  details      String?
  errorMessage String?
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_logs")
  @@index([userId])
}

model CalendarEvent {
  id            String    @id @default(cuid())
  userId        String
  googleEventId String?   @unique
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  location      String?
  source        String    @default("email")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
  @@index([userId])
}

model PendingEvent {
  id              String         @id @default(cuid())
  userId          String
  title           String
  date            DateTime
  description     String?        @db.Text
  status          PendingStatus  @default(PENDING)
  confidenceScore Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_events")
  @@index([userId])
}
