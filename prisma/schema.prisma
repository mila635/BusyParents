generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}



// SQLite doesn't support enums, using String with default values instead
// enum PendingStatus { PENDING, APPROVED, REJECTED }
// enum UserRole { PARENT, ADMIN }

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  image         String?
  provider      String          @default("google")
  role          String          @default("PARENT")
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLoginAt   DateTime?

  // Relations
  tokens        UserToken[]      // âœ… one-to-many
  settings      UserSettings?
  logs          UserLog[]
  events        CalendarEvent[]
  pendingEvents PendingEvent[]
  notificationPreferences NotificationPreferences?

  @@map("users")
}

model UserToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
  @@index([userId])
}

model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  emailProcessingEnabled Boolean  @default(true)
  calendarSyncEnabled    Boolean  @default(true)
  reminderEnabled        Boolean  @default(true)
  timezone               String   @default("UTC")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model NotificationPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  whatsappNotifications Boolean  @default(false)
  eventReminders        Boolean  @default(true)
  weeklyDigest          Boolean  @default(true)
  instantAlerts         Boolean  @default(false)
  whatsappNumber        String?
  reminderDuration      Int      @default(15) // minutes before event
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model UserLog {
  id           String    @id @default(cuid())
  userId       String
  action       String
  service      String
  status       String
  details      String?
  errorMessage String?
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_logs")
  @@index([userId])
}

model CalendarEvent {
  id            String    @id @default(cuid())
  userId        String
  googleEventId String?   @unique
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  location      String?
  source        String    @default("email")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
  @@index([userId])
}

model PendingEvent {
  id              String         @id @default(cuid())
  userId          String
  title           String
  date            DateTime
  description     String?
  status          String         @default("PENDING")
  confidenceScore Float?
  source          String         @default("email")
  extractedFrom   String?        // Email subject or ID
  location        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_events")
  @@index([userId])
}

// Make.com integration models
model WebhookEvent {
  id           String   @id @default(cuid())
  executionId  String?
  scenarioName String?
  status       String
  userEmail    String?
  data         String?
  error        String?
  timestamp    DateTime @default(now())

  @@map("webhook_events")
  @@index([executionId])
  @@index([userEmail])
}

model ExecutionResult {
  id           String   @id @default(cuid())
  executionId  String   @unique
  scenarioName String?
  userEmail    String?
  result       String
  timestamp    DateTime @default(now())

  @@map("execution_results")
  @@index([userEmail])
}

model ExecutionError {
  id           String   @id @default(cuid())
  executionId  String   @unique
  scenarioName String?
  userEmail    String?
  error        String
  timestamp    DateTime @default(now())

  @@map("execution_errors")
  @@index([userEmail])
}

model WorkflowTrigger {
  id            String    @id @default(cuid())
  action        String
  scenarioName  String?
  userEmail     String
  userId        String?
  status        String    @default("initiated") // initiated, triggered, in_progress, success, error
  executionId   String?
  platform      String    @default("web") // web, mobile, api
  workflowType  String    @default("n8n") // n8n, make, manual
  n8nWorkflowId String?   // N8N specific workflow ID
  additionalData String?  // Store additional data related to the workflow (JSON as string)
  timestamp     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  errorAt       DateTime?

  @@map("workflow_triggers")
  @@index([userEmail])
  @@index([action])
  @@index([executionId])
  @@index([userEmail, action])
  @@index([workflowType])
  @@index([timestamp(sort: Desc)])
}

model WorkflowError {
  id           String   @id @default(cuid())
  action       String
  scenarioName String?
  userEmail    String
  error        String
  timestamp    DateTime @default(now())

  @@map("workflow_errors")
  @@index([userEmail])
  @@index([action])
  @@index([timestamp(sort: Desc)])
}

// N8N Google Sheets integration model
model N8NUserData {
  id                  String   @id @default(cuid())
  userId              String
  name                String?
  email               String
  accessToken         String?
  gmailRefreshToken   String?
  calendarId          String?
  phoneNumber         String?
  lastSyncedAt        DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("n8n_user_data")
  @@index([userId])
  @@index([email])
  @@index([lastSyncedAt(sort: Desc)])
}
