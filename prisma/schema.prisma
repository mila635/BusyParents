// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String?
  image           String?
  provider        String          @default("google")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastLoginAt     DateTime?

  // Relations
  tokens          UserToken?
  settings        UserSettings?
  logs            UserLog[]
  events          CalendarEvent[]
  pendingEvents   PendingEvent[]  // Add this relation

  @@map("users")
}

model UserToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  emailProcessingEnabled  Boolean  @default(true)
  calendarSyncEnabled     Boolean  @default(true)
  reminderEnabled         Boolean  @default(true)
  timezone                String   @default("UTC")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserLog {
  id           String    @id @default(cuid())
  userId       String
  action       String
  service      String
  status       String
  details      String?
  errorMessage String?
  createdAt    DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_logs")
}

model CalendarEvent {
  id            String    @id @default(cuid())
  userId        String
  googleEventId String?
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  location      String?
  source        String    @default("email")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

// Model to represent a pending event identified by the AI
model PendingEvent {
  id              String    @id @default(cuid())
  userId          String
  title           String
  date            DateTime
  description     String?   @db.Text
  confidenceScore Float?
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_events")
}
